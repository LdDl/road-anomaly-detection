[input]
    # Source URL of video: https://www.youtube.com/watch?v=KBsqQez-O4w
    video_src = "./data/tests/test1.mp4"
    # Use string below for usage with CSI camera (where sensor-id is camera indentifier)
    # video_src = "nvarguscamerasrc sensor-id=0 ! video/x-raw(memory:NVMM), width=(int)1280, height=(int)720, format=(string)NV12, framerate=(fraction)30/1 ! nvvidconv flip-method=0 ! video/x-raw, width=(int)1280, height=(int)720, format=(string)BGRx ! videoconvert ! video/x-raw, format=(string)BGR ! appsink"
    # Two options: rtsp / any number corresponding to local camera (device)
    typ = "rtsp"
    # typ = "device"

[output]
    # Define attributes for imshow() if needed
    enable = true
    width = 1024
    height = 720
    window_name = "Road anomaly detector"


[detection]
    # Available model_versions: v3, v4, v7, v8
    # Default is v3
    network_ver = 8
    # Available model formats: "darknet", "onnx"
    # Default is "darknet"
    network_format = "onnx"
    network_weights = "./data/best.onnx"
    # Leave 'network_cfg' empty if using ONNX.
    # network_cfg = ""
    conf_threshold = 0.5
    nms_threshold = 0.4
    net_width = 320
    net_height = 320
    # Target classes to be used in filtering.
    # Leave array empty if all net classes should be used
    target_classes = []
    # Neural network classes
    net_classes = ["moderate_accident", "severe_accident"]
    # net_classes = ["moderate_accident", "object_accident", "severe_accident"]

[tracking]
    # Adjust number of seconds to forget event 
    delay_seconds = 30

# Leave [[zones]] empty if you want zone with size of the frame
[[zones]]
    id = "zone_1"
    geometry = [[904, 336], [1401, 297], [1567, 520], [804, 528]]
    color_rgb = [0, 0, 255]

[[zones]]
    id = "zone_2"
    geometry = [[393, 615], [1029, 596], [1189, 912], [255, 1003]]
    color_rgb = [255, 0, 255]
