[application_info]
    # Just field for future identification of application. Could be any string.
    id = "My-fancy-road-anomaly-detection-software"

[input]
    # Source URL of video: https://www.youtube.com/watch?v=z60Y20kJSmc
    video_src = "./data/tests/cctv_example.mp4"
    # Use string below for usage with CSI camera (where sensor-id is camera indentifier)
    # video_src = "nvarguscamerasrc sensor-id=0 ! video/x-raw(memory:NVMM), width=(int)1280, height=(int)720, format=(string)NV12, framerate=(fraction)30/1 ! nvvidconv flip-method=0 ! video/x-raw, width=(int)1280, height=(int)720, format=(string)BGRx ! videoconvert ! video/x-raw, format=(string)BGR ! appsink"
    # Two options: rtsp / any number corresponding to local camera (device)
    typ = "rtsp"
    # typ = "device"

[output]
    # Define attributes for imshow() if needed
    enable = true
    width = 1024
    height = 720
    window_name = "Road anomaly detector"


[detection]
    # Available model_versions: v3, v4, v7, v8
    # Default is v3
    network_ver = 8
    # Available model formats: "darknet", "onnx"
    # Default is "darknet"
    network_format = "onnx"
    network_weights = "./data/best_nano.onnx"
    # Leave 'network_cfg' empty if using ONNX.
    # network_cfg = ""
    conf_threshold = 0.8
    nms_threshold = 0.4
    net_width = 608
    net_height = 608
    # Target classes to be used in filtering.
    # Leave array empty if all net classes should be used
    target_classes = []
    # Neural network classes
    net_classes = ["moderate_accident", "severe_accident"]
    # net_classes = ["moderate_accident", "object_accident", "severe_accident"]

[tracking]
    # Adjust number of seconds to forget event 
    delay_seconds = 30
    # Adjust number of seconds to consider event is actually exists
    lifetime_seconds_min = 3
    # Adjust number of seconds after event would be considered as new even if detection object is the same
    lifetime_seconds_max = 15

# Leave [[zones]] empty if you want zone with size of the frame
# Note that ID's must be unique if you want to distinct output data
[[zones]]
    id = "zone_1"
    geometry = [[39, 52], [281, 54], [260, 331], [29, 319]]
    color_rgb = [0, 0, 255]

[[zones]]
    id = "zone_2"
    geometry = [[285, 54], [518, 80], [557, 322], [265, 331]]
    color_rgb = [255, 0, 255]

[publishers]
    # Redis is only option currently
    [publishers.redis]
        enable = true
        host = "localhost"
        port = 6379
        password = ""
        db_index = 0
        # If not provided then "ROAD_ANOMALIES_EVENTS" will be used as channel name
        channel_name = "ROAD_ANOMALY_DETECTION"
